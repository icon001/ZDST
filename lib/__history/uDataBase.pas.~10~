unit uDataBase;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef, FireDAC.Stan.ExprFuncs, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, FireDAC.Phys.ODBC,
  FireDAC.Phys.ODBCDef,Winapi.Windows,Vcl.Dialogs,Vcl.Forms, FireDAC.Phys.MSAcc,
  FireDAC.Phys.MSAccDef;

type
  TdmDatabase = class(TDataModule)
    FDConnection1: TFDConnection;
    FDQuery1: TFDQuery;
  private
    class function FindSelf:TComponent;
    { Private declarations }
  public
    class Function GetObject:TdmDatabase;   //자기자신을 찾는것  class 는 폼생성전에도 사용가능
  public
    { Public declarations }
    procedure DatabaseCreate;
  end;

  function SQLConfigDataSource(hwndParent : HWND; fRequest : WORD; lpszDriver : LPCSTR; lpszAttributes : LPCSTR) : Boolean; stdcall; external 'ODBCCP32.DLL';

var
  dmDatabase: TdmDatabase;

implementation

uses
  uComonVariable;

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ TdmDatabase }

procedure TdmDatabase.DatabaseCreate;

begin
  if Not FileExists(G_stExeFolder + '\KSP.mdb') then
  begin
        ChDir(G_stExeFolder);
        SQLConfigDataSource(0, 1, LPCSTR('Microsoft Access Driver (*.mdb)'), LPCSTR('CREATE_DB=KSP.mdb General'));
  end;

  Try
    with FDConnection1 do
    begin
      Connected := False;
      Try
        Params.Clear;
        Params.Add('DriverID=MSAcc');
        Params.Add('Database='+G_stExeFolder + '\KSP.mdb');
        Params.Add('ReadOnly=False');
        LoginPrompt:= false ;
        Connected := True;
      Except
        on E : EDatabaseError do
          begin
            ShowMessage(E.Message );
            Exit;
          end;
        else
          begin
            ShowMessage('접속실패' );
            Exit;
          end;
      End;

    end;
  Finally

  End;

end;

class function TdmDatabase.FindSelf: TComponent;
var
  Loop:Integer;
begin
  Result:=Nil;
  for Loop:=0 to Application.ComponentCount-1 do begin
      if Application.Components[Loop] is TdmDatabase then begin
          Result:= Application.Components[Loop];
          Break;
      end;
  end;
end;

class function TdmDatabase.GetObject: TdmDatabase;
begin
   If FindSelf = Nil then TdmDatabase.Create(Application);
   Result := TdmDatabase(FindSelf);
end;

end.
